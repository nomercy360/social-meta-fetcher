// src/adapter/lambda-edge/handler.ts
import crypto from "crypto";
import { encodeBase64 } from "../../utils/encode.js";
globalThis.crypto ?? (globalThis.crypto = crypto);
var handle = (app) => {
  return async (event, context, callback) => {
    const req = createRequest(event);
    const res = await app.fetch(req, {
      event,
      context,
      callback,
      request: event.Records[0].cf.request
    });
    return createResult(res);
  };
};
var createResult = async (res) => {
  const isBase64Encoded = isContentTypeBinary(res.headers.get("content-type") || "");
  const body = isBase64Encoded ? encodeBase64(await res.arrayBuffer()) : await res.text();
  const headers = {};
  res.headers.forEach((value, key) => {
    headers[key.toLowerCase()] = [{ key: key.toLowerCase(), value }];
  });
  return {
    status: res.status.toString(),
    headers,
    body
  };
};
var createRequest = (event) => {
  const queryString = extractQueryString(event);
  const urlPath = `https://${event.Records[0].cf.config.distributionDomainName}${event.Records[0].cf.request.uri}`;
  const url = queryString ? `${urlPath}?${queryString}` : urlPath;
  const headers = new Headers();
  for (const [k, v] of Object.entries(event.Records[0].cf.request.headers)) {
    v.forEach((header) => headers.set(k, header.value));
  }
  const method = event.Records[0].cf.request.method;
  const requestInit = {
    headers,
    method
  };
  const requestBody = event.Records[0].cf.request.body;
  requestInit.body = requestBody?.encoding === "base64" && requestBody?.data ? atob(requestBody.data) : requestBody?.data;
  return new Request(url, requestInit);
};
var extractQueryString = (event) => {
  return event.Records[0].cf.request.querystring;
};
var isContentTypeBinary = (contentType) => {
  return !/^(text\/(plain|html|css|javascript|csv).*|application\/(.*json|.*xml).*|image\/svg\+xml)$/.test(
    contentType
  );
};
export {
  handle,
  isContentTypeBinary
};
